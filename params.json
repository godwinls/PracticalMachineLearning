{"name":"Practicalmachinelearning","tagline":"","body":"<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\r\n<head>\r\n\r\n<meta charset=\"utf-8\">\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<meta name=\"generator\" content=\"pandoc\" />\r\n\r\n\r\n\r\n<title></title>\r\n\r\n\r\n\r\n\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<style type=\"text/css\">\r\n</style>\r\n<div class=\"container-fluid main-container\">\r\n\r\n\r\n\r\n\r\n<div id=\"practical-machine-learning-project\" class=\"section level1\">\r\n<h1>Practical Machine Learning Project</h1>\r\n<div id=\"summary\" class=\"section level2\">\r\n<h2>Summary</h2>\r\n<p>This project is to build a model to predict the type of activities performed by participants.</p>\r\n<p>The training data for this project are available here: <a href=\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\">https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv</a></p>\r\n<p>The test data are available here: <a href=\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\">https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv</a></p>\r\n</div>\r\n<div id=\"load-and-clean-data\" class=\"section level2\">\r\n<h2>Load and Clean Data</h2>\r\n<pre class=\"r\"><code>library(caret)\r\ntraining&lt;-read.csv('pml-training.csv',header= TRUE)\r\ntesting&lt;-read.csv('pml-testing.csv',header=TRUE)\r\n#remove NAs\r\ntraining&lt;-training[,colSums(is.na(training)) == 0]\r\n#remove near zero variance\r\nnearZero&lt;-nearZeroVar(training, saveMetrics=TRUE)\r\ntraining&lt;-training[, nearZero$nzv==FALSE]\r\n#remove unrelevant columns\r\ntraining&lt;-training[,7:ncol(training)]</code></pre>\r\n</div>\r\n<div id=\"build-the-model-using-random-forest\" class=\"section level2\">\r\n<h2>Build the model using random forest</h2>\r\n<pre class=\"r\"><code>set.seed(1990)\r\ninTrain&lt;-createDataPartition(training$classe,p=0.7,list=FALSE)\r\ntrain&lt;-training[inTrain,]\r\ntest&lt;-training[-inTrain,]\r\n#set the cross-validation\r\nctrl&lt;-trainControl(method=&quot;cv&quot;, number=5, allowParallel=TRUE)\r\nmodFit&lt;-train(classe ~ ., data=train, method=&quot;rf&quot;, trControl=ctrl)\r\nmodFit$finalModel</code></pre>\r\n<pre><code>## \r\n## Call:\r\n##  randomForest(x = x, y = y, mtry = param$mtry) \r\n##                Type of random forest: classification\r\n##                      Number of trees: 500\r\n## No. of variables tried at each split: 2\r\n## \r\n##         OOB estimate of  error rate: 0.71%\r\n## Confusion matrix:\r\n##      A    B    C    D    E class.error\r\n## A 3901    3    1    1    0    0.001280\r\n## B   13 2636    9    0    0    0.008277\r\n## C    1   14 2377    4    0    0.007930\r\n## D    0    0   42 2208    2    0.019538\r\n## E    0    0    3    4 2518    0.002772</code></pre>\r\n</div>\r\n<div id=\"testout-of-sample-error\" class=\"section level2\">\r\n<h2>Test&amp;Out-of-Sample Error</h2>\r\n<pre class=\"r\"><code>testingPredict&lt;-predict(modFit, test)\r\ncm&lt;-confusionMatrix(testingPredict,test$classe)\r\ncm</code></pre>\r\n<pre><code>## Confusion Matrix and Statistics\r\n## \r\n##           Reference\r\n## Prediction    A    B    C    D    E\r\n##          A 1672   12    0    0    0\r\n##          B    2 1127    9    0    0\r\n##          C    0    0 1016   15    2\r\n##          D    0    0    1  949    3\r\n##          E    0    0    0    0 1077\r\n## \r\n## Overall Statistics\r\n##                                        \r\n##                Accuracy : 0.993        \r\n##                  95% CI : (0.99, 0.995)\r\n##     No Information Rate : 0.284        \r\n##     P-Value [Acc &gt; NIR] : &lt;2e-16       \r\n##                                        \r\n##                   Kappa : 0.991        \r\n##  Mcnemar's Test P-Value : NA           \r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n## Sensitivity             0.999    0.989    0.990    0.984    0.995\r\n## Specificity             0.997    0.998    0.997    0.999    1.000\r\n## Pos Pred Value          0.993    0.990    0.984    0.996    1.000\r\n## Neg Pred Value          1.000    0.997    0.998    0.997    0.999\r\n## Prevalence              0.284    0.194    0.174    0.164    0.184\r\n## Detection Rate          0.284    0.192    0.173    0.161    0.183\r\n## Detection Prevalence    0.286    0.193    0.176    0.162    0.183\r\n## Balanced Accuracy       0.998    0.994    0.993    0.992    0.998</code></pre>\r\n<pre class=\"r\"><code>outError&lt;-1-sum(diag(cm$table))/sum(cm$table)\r\noutError</code></pre>\r\n<pre><code>## [1] 0.007477</code></pre>\r\n<p>The out of sample error is less than 1%</p>\r\n</div>\r\n<div id=\"predictions\" class=\"section level2\">\r\n<h2>Predictions</h2>\r\n<pre class=\"r\"><code>predict20 &lt;- predict(modFit, testing)\r\nprint( predict20 )</code></pre>\r\n<pre><code>##  [1] B A B A A E D B A A B C B A E E A B B B\r\n## Levels: A B C D E</code></pre>\r\n<p>The results are all correct</p>\r\n</div>\r\n</div>\r\n\r\n\r\n</div>\r\n\r\n<script>\r\n\r\n// add bootstrap table styles to pandoc tables\r\n$(document).ready(function () {\r\n  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');\r\n});\r\n\r\n</script>\r\n\r\n<!-- dynamically load mathjax for compatibility with self-contained -->\r\n<script>\r\n  (function () {\r\n    var script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src  = \"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\";\r\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n  })();\r\n</script>\r\n\r\n</body>\r\n</html>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}